plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.researchgate.release' version '3.0.2'
    id 'io.github.gradle-nexus.publish-plugin' version '1.2.0'
    id 'maven-publish'
    id 'signing'
    id 'com.google.protobuf' version '0.8.17'
}

repositories {
    jcenter()
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('sourcesJar').configure {
    dependsOn ':generateProto'
}

shadowJar {
    archiveClassifier = 'shadow'
    relocate 'org.objectweb.asm', 'org.objectweb.asm.shaded'
}

// tasks.withType(Javadoc).configureEach {
//     options.addStringOption('Xdoclint:none', '-quiet')
// }

tasks.withType(Javadoc).all { enabled = false }

dependencies {
    // Gson dependency for JSON serialization/deserialization
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.bitcoinj:bitcoinj-core:0.16.2'
    // https://mvnrepository.com/artifact/com.github.jnr/jnr-posix
    implementation group: 'com.github.jnr', name: 'jnr-posix', version: '3.1.18'

    // Existing dependencies...
    
    // Bouncy Castle PKIX/CMS/EAC/PKCS/OCSP/TSP/OPENSSL
    implementation 'org.bouncycastle:bcpkix-jdk15to18:1.70'

    // Protobuf dependency
    implementation 'com.google.protobuf:protobuf-java:3.19.4'

    testImplementation 'junit:junit:4.13.2'
}

release {
    newVersionCommitMessage = '[jnr-fuse release] - '
    preTagCommitMessage = '[jnr-fuse release] - pre tag commit: '
    buildTasks = ['clean', 'assemble', 'publishToSonatype', 'closeAndReleaseSonatypeStagingRepository']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jnr-fuse'
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'jnr-fuse'
                description = 'jnr-fuse is a FUSE implementation in java using Java Native Runtime (JNR).'
                url = 'https://github.com/SerCeMan/jnr-fuse'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'SerCe'
                        name = 'Sergey Tselovalnikov'
                        email = 'sergeicelov@gmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/SerCeMan/jnr-fuse'
                    connection = 'scm:git:git@github.com:SerCeMan/jnr-fuse.git'
                    developerConnection = 'scm:git:git@github.com:SerCeMan/jnr-fuse.git'
                }
            }
        }
    }

    repositories {
        maven {
            // A test repository in the build repository
            // allowing easy verification of published artifacts
            name = 'projectLocal'
            url = file("${buildDir}/repo")
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username.set(providers.environmentVariable("SONATYPE_LOGIN").forUseAtConfigurationTime())
            password.set(providers.environmentVariable("SONATYPE_PASSWORD").forUseAtConfigurationTime())
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    setRequired {
        gradle.taskGraph.allTasks.any {
            it.name == 'publishToSonatype'
        }
    }
}
// Protobuf configuration
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.19.4'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite' // Use 'lite' for JavaLite, remove for full Java.
                }
            }
        }
    }
}

sourceSets {
  main {
    proto {
      // In addition to the default 'src/main/proto'
      // srcDir 'src/main/protobuf'
      // In addition to the default '**/*.proto' (use with caution).
      // Using an extension other than 'proto' is NOT recommended,
      // because when proto files are published along with class files, we can
      // only tell the type of a file from its extension.
      // include '**/*.protodevel'
    }
    java {
       srcDir 'build/generated/source/proto/main/java'
    }
  }
}
